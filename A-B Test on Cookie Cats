{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8164470,"sourceType":"datasetVersion","datasetId":4830945}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aryanaryashrestha/a-b-test-cookie-cats?scriptVersionId=172842380\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install pandas","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install seaborn","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Importing Libraries\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n\n# Hypothesis Testing\nfrom scipy.stats import shapiro\nimport scipy.stats as stats\n\n# Configuration\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:.4f}'.format","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"path = \"/home/aryashrestha/Documents/Projects/cookie_cats.csv\"\n\ndef load(path, info = True):\n    \n    import pandas as pd\n    import io\n    \n    if len(path.split(\".csv\")) > 1:\n        read = pd.read_csv(path)\n    elif len(path.split(\".xlsx\")) > 1:\n        read = pd.read_excel(path)\n    \n    if info:\n        if len(read) > 0:\n            print(\"# Data imported!\")\n            print(\"# ------------------------------------\", \"\\n\")\n        \n            print(\"# DIMENSIONS -------------------------\")\n            print(\"Observation:\", read.shape[0], \"Column:\", read.shape[1], \"\\n\")\n    \n            print(\"# DTYPES -----------------------------\")\n            if len(read.select_dtypes(\"object\").columns) > 0:\n                print(\"Object Variables:\", \"\\n\", \"# of Variables:\", \n                      len(read.select_dtypes(\"object\").columns), \"\\n\", \n                      read.select_dtypes(\"object\").columns.tolist(), \"\\n\")\n    \n            if len(read.select_dtypes(\"integer\").columns) > 0:\n                print(\"Integer Variables:\", \"\\n\", \"# of Variables:\", \n                      len(read.select_dtypes(\"integer\").columns), \"\\n\", \n                      read.select_dtypes(\"integer\").columns.tolist(), \"\\n\")\n    \n            if len(read.select_dtypes(\"float\").columns) > 0:\n                print(\"Float Variables:\", \"\\n\", \"# of Variables:\", \n                      len(read.select_dtypes(\"float\").columns), \"\\n\", \n                      read.select_dtypes(\"float\").columns.tolist(), \"\\n\")\n    \n            if len(read.select_dtypes(\"bool\").columns) > 0:\n                print(\"Bool Variables:\", \"\\n\", \"# of Variables:\", \n                      len(read.select_dtypes(\"bool\").columns), \"\\n\", \n                      read.select_dtypes(\"bool\").columns.tolist(), \"\\n\")\n    \n            print(\"# MISSING VALUE ---------------------\")\n            print(\"Are there any missing values? \\n \", np.where(read.isnull().values.any() == False,\n                                                                \"No missing value!\", \"Data includes missing value!\"), \"\\n\")\n            \n            buf = io.StringIO()\n            read.info(buf=buf)\n            info = buf.getvalue().split('\\n')[-2].split(\":\")[1].strip()\n            print(\"# MEMORY USAGE ---------------------- \\n\", info)\n          \n        else:\n            print(\"# Data did not import!\")\n    \n    return read\n    \nab = load(path, info = True)\nab.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Summary Stats\n# Number of Unique User\nprint(ab.userid.nunique() == ab.shape[0])\n# Summary Stats: sum_gamerounds\nab.describe([0.01, 0.05, 0.10, 0.20, 0.80, 0.90, 0.95, 0.99])[[\"sum_gamerounds\"]].T","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# A/B Groups & Target Summary Stats\nab.groupby(\"version\").sum_gamerounds.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 3, figsize = (18,5))\nab[(ab.version == \"gate_30\")].hist(\"sum_gamerounds\", ax = axes[0], color = \"steelblue\")\nab[(ab.version == \"gate_40\")].hist(\"sum_gamerounds\", ax = axes[1], color = \"steelblue\")\nsns.boxplot(x = ab.version, y = ab.sum_gamerounds, ax = axes[2])\n\nplt.suptitle(\"Before Removing The Extreme Value\", fontsize = 20)\naxes[0].set_title(\"Distribution of Gate 30 (A)\", fontsize = 15)\naxes[1].set_title(\"Distribution of Gate 40 (B)\", fontsize = 15)\naxes[2].set_title(\"Distribution of Two Groups\", fontsize = 15)\n\nplt.tight_layout(pad = 4);","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab[ab.version == \"gate_30\"].reset_index().set_index(\"index\").sum_gamerounds.plot(legend = True, label = \"Gate 30\", figsize = (20,5))\nab[ab.version == \"gate_40\"].reset_index().set_index(\"index\").sum_gamerounds.plot(legend = True, label = \"Gate 40\")\nplt.suptitle(\"Before Removing The Extreme Value\", fontsize = 20);","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Outliers\nab = ab[ab.sum_gamerounds < ab.sum_gamerounds.max()]\n# Summary Stats: sum_gamerounds\nab.describe([0.01, 0.05, 0.10, 0.20, 0.80, 0.90, 0.95, 0.99])[[\"sum_gamerounds\"]].T","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 4, figsize = (18,5))\nab.sum_gamerounds.hist(ax = axes[0], color = \"steelblue\")\nab[(ab.version == \"gate_30\")].hist(\"sum_gamerounds\", ax = axes[1], color = \"steelblue\")\nab[(ab.version == \"gate_40\")].hist(\"sum_gamerounds\", ax = axes[2], color = \"steelblue\")\nsns.boxplot(x = ab.version, y = ab.sum_gamerounds, ax = axes[3])\n\nplt.suptitle(\"After Removing The Extreme Value\", fontsize = 20)\naxes[0].set_title(\"Distribution of Total Game Rounds\", fontsize = 15)\naxes[1].set_title(\"Distribution of Gate 30 (A)\", fontsize = 15)\naxes[2].set_title(\"Distribution of Gate 40 (B)\", fontsize = 15)\naxes[3].set_title(\"Distribution of Two Groups\", fontsize = 15)\n\nplt.tight_layout(pad = 4);","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab[(ab.version == \"gate_30\")].reset_index().set_index(\"index\").sum_gamerounds.plot(legend = True, label = \"Gate 30\", figsize = (20,5))\nab[ab.version == \"gate_40\"].reset_index().set_index(\"index\").sum_gamerounds.plot(legend = True, label = \"Gate 40\", alpha = 0.8)\nplt.suptitle(\"After Removing The Extreme Value\", fontsize = 20);","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The users installed the game but 3994 users never played the game! Some reasons might explain this situation.\n\nThey have no free time to play game\nUsers might prefer to play other games or they play other games already\nSome users don't like the app etc.\nYou can comment below for this users also\nThe number of users decreases as the levels progress\n\nMost of users played the game at early stage and they didn't progress.\nTactile Entertainment should learn why users churn playing the game.\nDoing research and collecting data about the game and users would help to understand user churn\nThe difficulty of the game can be measured\nGifts might help player retention","metadata":{}},{"cell_type":"code","source":"fig, axes = plt.subplots(2, 1, figsize = (25,10))\nab.groupby(\"sum_gamerounds\").userid.count().plot(ax = axes[0])\nab.groupby(\"sum_gamerounds\").userid.count()[:200].plot(ax = axes[1])\nplt.suptitle(\"The number of users in the game rounds played\", fontsize = 25)\naxes[0].set_title(\"How many users are there all game rounds?\", fontsize = 15)\naxes[1].set_title(\"How many users are there first 200 game rounds?\", fontsize = 15)\nplt.tight_layout(pad=5);","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab.groupby(\"sum_gamerounds\").userid.count().reset_index().head(20)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# How many users reached gate 30 & gate 40 levels?\nab.groupby(\"sum_gamerounds\").userid.count().loc[[30,40]]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# A/B Groups & Target Summary Stats\nab.groupby(\"version\").sum_gamerounds.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Retention variables gives us player retention details.\n\nretention_1 - did the player come back and play 1 day after installing?\nretention_7 - did the player come back and play 7 days after installing?\nAlso players tend not to play the game! There are many players who quit the game.\n\n55 percent of the players didn't play the game 1 day after insalling\n81 percent of the players didn't play the game 7 day after insalling","metadata":{}},{"cell_type":"code","source":"# Retention Problem\npd.DataFrame({\"RET1_COUNT\": ab[\"retention_1\"].value_counts(),\n              \"RET7_COUNT\": ab[\"retention_7\"].value_counts(),\n              \"RET1_RATIO\": ab[\"retention_1\"].value_counts() / len(ab),\n              \"RET7_RATIO\": ab[\"retention_7\"].value_counts() / len(ab)})","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Looking at the summary statistics of retention variables by version and comparing with sum_gamerounds, there are similarities between groups. However, it will be more helpful to see if there is a statistically significant difference.","metadata":{}},{"cell_type":"code","source":"ab.groupby([\"version\", \"retention_1\"]).sum_gamerounds.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab.groupby([\"version\", \"retention_7\"]).sum_gamerounds.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Similar results are seen when the number of users who came and did not come 1 day and 7 days after the game was installing. Approximately 12.000 users among the total users played the game both 1 day and 7 days after installing the game. 14% of the total users include people who will continue the game in the future.","metadata":{}},{"cell_type":"code","source":"ab[\"Retention\"] = np.where((ab.retention_1 == True) & (ab.retention_7 == True), 1,0)\nab.groupby([\"version\", \"Retention\"])[\"sum_gamerounds\"].agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"When the retention variables are combined and the two groups are compared, the summary statistics are similar here as well.","metadata":{}},{"cell_type":"code","source":"ab[\"NewRetention\"] = list(map(lambda x,y: str(x)+\"-\"+str(y), ab.retention_1, ab.retention_7))\nab.groupby([\"version\", \"NewRetention\"]).sum_gamerounds.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"]).reset_index()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"raw","source":"A/B Testing\nAssumptions:\nCheck normality\nIf Normal Distribution, check homogeneity\nSteps:\nSplit & Define Control Group & Test Group\nApply Shapiro Test for normality\nIf parametric apply Levene Test for homogeneity of variances\nIf Parametric + homogeneity of variances apply T-Test\nIf Parametric - homogeneity of variances apply Welch Test\nIf Non-parametric apply Mann Whitney U Test directly","metadata":{}},{"cell_type":"code","source":"# Define A/B groups\nab[\"version\"] = np.where(ab.version == \"gate_30\", \"A\", \"B\")\nab.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# A/B Testing Function - Quick Solution\ndef AB_Test(dataframe, group, target):\n    \n    # Packages\n    from scipy.stats import shapiro\n    import scipy.stats as stats\n    \n    # Split A/B\n    groupA = dataframe[dataframe[group] == \"A\"][target]\n    groupB = dataframe[dataframe[group] == \"B\"][target]\n    \n    # Assumption: Normality\n    ntA = shapiro(groupA)[1] < 0.05\n    ntB = shapiro(groupB)[1] < 0.05\n    # H0: Distribution is Normal! - False\n    # H1: Distribution is not Normal! - True\n    \n    if (ntA == False) & (ntB == False): # \"H0: Normal Distribution\"\n        # Parametric Test\n        # Assumption: Homogeneity of variances\n        leveneTest = stats.levene(groupA, groupB)[1] < 0.05\n        # H0: Homogeneity: False\n        # H1: Heterogeneous: True\n        \n        if leveneTest == False:\n            # Homogeneity\n            ttest = stats.ttest_ind(groupA, groupB, equal_var=True)[1]\n            # H0: M1 == M2 - False\n            # H1: M1 != M2 - True\n        else:\n            # Heterogeneous\n            ttest = stats.ttest_ind(groupA, groupB, equal_var=False)[1]\n            # H0: M1 == M2 - False\n            # H1: M1 != M2 - True\n    else:\n        # Non-Parametric Test\n        ttest = stats.mannwhitneyu(groupA, groupB)[1] \n        # H0: M1 == M2 - False\n        # H1: M1 != M2 - True\n        \n    # Result\n    temp = pd.DataFrame({\n        \"AB Hypothesis\":[ttest < 0.05], \n        \"p-value\":[ttest]\n    })\n    temp[\"Test Type\"] = np.where((ntA == False) & (ntB == False), \"Parametric\", \"Non-Parametric\")\n    temp[\"AB Hypothesis\"] = np.where(temp[\"AB Hypothesis\"] == False, \"Fail to Reject H0\", \"Reject H0\")\n    temp[\"Comment\"] = np.where(temp[\"AB Hypothesis\"] == \"Fail to Reject H0\", \"A/B groups are similar!\", \"A/B groups are not similar!\")\n    \n    # Columns\n    if (ntA == False) & (ntB == False):\n        temp[\"Homogeneity\"] = np.where(leveneTest == False, \"Yes\", \"No\")\n        temp = temp[[\"Test Type\", \"Homogeneity\",\"AB Hypothesis\", \"p-value\", \"Comment\"]]\n    else:\n        temp = temp[[\"Test Type\",\"AB Hypothesis\", \"p-value\", \"Comment\"]]\n    \n    # Print Hypothesis\n    print(\"# A/B Testing Hypothesis\")\n    print(\"H0: A == B\")\n    print(\"H1: A != B\", \"\\n\")\n    \n    return temp\n    \n    \n    \n# Apply A/B Testing\nAB_Test(dataframe=ab, group = \"version\", target = \"sum_gamerounds\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab.groupby(\"version\").retention_1.mean(), ab.groupby(\"version\").retention_7.mean()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}