{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8162547,"sourceType":"datasetVersion","datasetId":4829479},{"sourceId":8162594,"sourceType":"datasetVersion","datasetId":4829515}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aryanaryashrestha/ai-chess-bot?scriptVersionId=172811962\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install python-chess","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess\nboard = chess.Board()\nboard","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pawntable = [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    5, 10, 10, -20, -20, 10, 10, 5,\n    5, -5, -10, 0, 0, -10, -5, 5,\n    0, 0, 0, 20, 20, 0, 0, 0,\n    5, 5, 10, 25, 25, 10, 5, 5,\n    10, 10, 20, 30, 30, 20, 10, 10,\n    50, 50, 50, 50, 50, 50, 50, 50,\n    0, 0, 0, 0, 0, 0, 0, 0]\n\nknightstable = [\n    -50, -40, -30, -30, -30, -30, -40, -50,\n    -40, -20, 0, 5, 5, 0, -20, -40,\n    -30, 5, 10, 15, 15, 10, 5, -30,\n    -30, 0, 15, 20, 20, 15, 0, -30,\n    -30, 5, 15, 20, 20, 15, 5, -30,\n    -30, 0, 10, 15, 15, 10, 0, -30,\n    -40, -20, 0, 0, 0, 0, -20, -40,\n    -50, -40, -30, -30, -30, -30, -40, -50]\nbishopstable = [\n    -20, -10, -10, -10, -10, -10, -10, -20,\n    -10, 5, 0, 0, 0, 0, 5, -10,\n    -10, 10, 10, 10, 10, 10, 10, -10,\n    -10, 0, 10, 10, 10, 10, 0, -10,\n    -10, 5, 5, 10, 10, 5, 5, -10,\n    -10, 0, 5, 10, 10, 5, 0, -10,\n    -10, 0, 0, 0, 0, 0, 0, -10,\n    -20, -10, -10, -10, -10, -10, -10, -20]\nrookstable = [\n    0, 0, 0, 5, 5, 0, 0, 0,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    5, 10, 10, 10, 10, 10, 10, 5,\n    0, 0, 0, 0, 0, 0, 0, 0]\nqueenstable = [\n    -20, -10, -10, -5, -5, -10, -10, -20,\n    -10, 0, 0, 0, 0, 0, 0, -10,\n    -10, 5, 5, 5, 5, 5, 0, -10,\n    0, 0, 5, 5, 5, 5, 0, -5,\n    -5, 0, 5, 5, 5, 5, 0, -5,\n    -10, 0, 5, 5, 5, 5, 0, -10,\n    -10, 0, 0, 0, 0, 0, 0, -10,\n    -20, -10, -10, -5, -5, -10, -10, -20]\nkingstable = [\n    20, 30, 10, 0, 0, 10, 30, 20,\n    20, 20, 0, 0, 0, 0, 20, 20,\n    -10, -20, -20, -20, -20, -20, -20, -10,\n    -20, -30, -30, -40, -40, -30, -30, -20,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def evaluate_board(board):\n    if board.is_checkmate():\n        if board.turn:\n            return -9999\n        else:\n            return 9999\n    if board.is_stalemate():\n        return 0\n    if board.is_insufficient_material():\n        return 0","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"wp = len(board.pieces(chess.PAWN, chess.WHITE))\nbp = len(board.pieces(chess.PAWN, chess.BLACK))\nwn = len(board.pieces(chess.KNIGHT, chess.WHITE))\nbn = len(board.pieces(chess.KNIGHT, chess.BLACK))\nwb = len(board.pieces(chess.BISHOP, chess.WHITE))\nbb = len(board.pieces(chess.BISHOP, chess.BLACK))\nwr = len(board.pieces(chess.ROOK, chess.WHITE))\nbr = len(board.pieces(chess.ROOK, chess.BLACK))\nwq = len(board.pieces(chess.QUEEN, chess.WHITE))\nbq = len(board.pieces(chess.QUEEN, chess.BLACK))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"material = 100 * (wp - bp) + 320 * (wn - bn) + 330 * (wb - bb) + 500 * (wr - br) + 900 * (wq - bq)\npawnsq = sum([pawntable[i] for i in board.pieces(chess.PAWN, chess.WHITE)])\npawnsq = pawnsq + sum([-pawntable[chess.square_mirror(i)]\n                       for i in board.pieces(chess.PAWN, chess.BLACK)])\nknightsq = sum([knightstable[i] for i in board.pieces(chess.KNIGHT, chess.WHITE)])\nknightsq = knightsq + sum([-knightstable[chess.square_mirror(i)]\n                           for i in board.pieces(chess.KNIGHT, chess.BLACK)])\nbishopsq = sum([bishopstable[i] for i in board.pieces(chess.BISHOP, chess.WHITE)])\nbishopsq = bishopsq + sum([-bishopstable[chess.square_mirror(i)]\n                           for i in board.pieces(chess.BISHOP, chess.BLACK)])\nrooksq = sum([rookstable[i] for i in board.pieces(chess.ROOK, chess.WHITE)])\nrooksq = rooksq + sum([-rookstable[chess.square_mirror(i)]\n                       for i in board.pieces(chess.ROOK, chess.BLACK)])\nqueensq = sum([queenstable[i] for i in board.pieces(chess.QUEEN, chess.WHITE)])\nqueensq = queensq + sum([-queenstable[chess.square_mirror(i)]\n                         for i in board.pieces(chess.QUEEN, chess.BLACK)])\nkingsq = sum([kingstable[i] for i in board.pieces(chess.KING, chess.WHITE)])\nkingsq = kingsq + sum([-kingstable[chess.square_mirror(i)]\n                       for i in board.pieces(chess.KING, chess.BLACK)])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def evaluate_position(board):\n    eval = material + pawnsq + knightsq + bishopsq + rooksq + queensq + kingsq\n    if board.turn:\n        return eval\n    else:\n        return -eval","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess.polyglot\n\ndef alphabeta(board, depth, alpha, beta, maximizing_player):\n    if depth == 0 or board.is_game_over():\n        return evaluate_position(board)\n\n    if maximizing_player:\n        max_eval = -99999\n        for move in board.legal_moves:\n            board.push(move)\n            eval = alphabeta(board, depth - 1, alpha, beta, False)\n            board.pop()\n            max_eval = max(max_eval, eval)\n            alpha = max(alpha, eval)\n            if beta <= alpha:\n                break\n        return max_eval\n    else:\n        min_eval = 99999\n        for move in board.legal_moves:\n            board.push(move)\n            eval = alphabeta(board, depth - 1, alpha, beta, True)\n            board.pop()\n            min_eval = min(min_eval, eval)\n            beta = min(beta, eval)\n            if beta <= alpha:\n                break\n        return min_eval\n\n# Placeholder for evaluate_position function\ndef evaluate_position(board):\n    # Implement your evaluation function here\n    pass\n\n# Placeholder for board initialization\nboard = chess.Board()\n\ntry:\n    # Placeholder for opening book move\n    move = chess.polyglot.MemoryMappedReader(\"/home/aryashrestha/Documents/ChessBot-AI-Project/human.bin\").weighted_choice(board).move\n    print(move)  # Or do something with the move\nexcept Exception as e:\n    print(\"Exception occurred while accessing opening book:\", e)\n    # Placeholder for depth\n    depth = 3\n    bestMove = chess.Move.null()\n    bestValue = -99999\n    alpha = -100000\n    beta = 100000\n    for move in board.legal_moves:\n        board.push(move)\n        boardValue = -alphabeta(board, depth - 1, -beta, -alpha, False)\n        if boardValue > bestValue:\n            bestValue = boardValue\n            bestMove = move\n        if boardValue > alpha:\n            alpha = boardValue\n        board.pop()\n    print(\"Best move:\", bestMove)  # Or do something with the best move\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def alphabeta(alpha, beta, depthleft):\n    bestscore = -9999\n    if (depthleft == 0):\n        return quiesce(alpha, beta)\n    for move in board.legal_moves:\n        board.push(move)\n        score = -alphabeta(-beta, -alpha, depthleft - 1)\n        board.pop()\n        if (score >= beta):\n            return score\n        if (score > bestscore):\n            bestscore = score\n        if (score > alpha):\n            alpha = score\n    return bestscore","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def quiesce(alpha, beta):\n    stand_pat = evaluate_board()  # You might need to pass the current board state to evaluate_board\n    if stand_pat >= beta:\n        return beta\n    if alpha < stand_pat:\n        alpha = stand_pat\n    \n    for move in board.legal_moves:\n        if board.is_capture(move):\n            board.push(move)\n            score = -quiesce(-beta, -alpha)\n            board.pop()\n            \n            if score >= beta:\n                return beta\n            if score > alpha:\n                alpha = score\n    \n    return alpha","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess.svg\nimport chess.pgn\nimport chess.engine\nfrom IPython.display import SVG","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess.engine\n\ndef selectmove(depth):\n    with chess.engine.SimpleEngine.popen_uci(\"/home/aryashrestha/Documents/ChessBot-AI-Project/stockfish-ubuntu-x86-64-avx2/stockfish/stockfish-ubuntu-x86-64-avx2\") as engine:\n        result = engine.play(board, chess.engine.Limit(depth=depth))\n        return result.move","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess\nimport chess.svg\nimport datetime\n\ncount = 0\nmovehistory = []\ngame = chess.pgn.Game()\nboard = chess.Board()\n\nwhile not board.is_game_over(claim_draw=True):\n    if board.turn:\n        count += 1\n        print(f'\\n{count}]\\n')\n        move = selectmove(3)  # You need to define the selectmove function\n        board.push(move)\n        movehistory.append(move)  # Add the move to movehistory\n        print(board)\n        print()\n    else:\n        move = selectmove(3)  # You need to define the selectmove function\n        board.push(move)\n        movehistory.append(move)  # Add the move to movehistory\n        print(board)\n\ngame.add_line(movehistory)\ngame.headers[\"Event\"] = \"Self Tournament 2020\"\ngame.headers[\"Site\"] = \"Pune\"\ngame.headers[\"Date\"] = str(datetime.datetime.now().date())\ngame.headers[\"Round\"] = 1\ngame.headers[\"White\"] = \"AI\"\ngame.headers[\"Black\"] = \"AI\"\ngame.headers[\"Result\"] = str(board.result(claim_draw=True))\nprint(game)\nSVG(chess.svg.board(board=board, size=400))\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import chess\nimport chess.pgn\nimport chess.engine\nimport chess.svg\nimport datetime\n\ncount = 0\nmovehistory = []\ngame = chess.pgn.Game()\nboard = chess.Board()\nengine = chess.engine.SimpleEngine.popen_uci(\"/home/aryashrestha/Documents/ChessBot-AI-Project/stockfish-ubuntu-x86-64-avx2/stockfish/stockfish-ubuntu-x86-64-avx2\")\n\nresign_keyword = \"resign\"\n\nwhile not board.is_game_over(claim_draw=True):\n    if board.turn:\n        count += 1\n        print(f'\\n{count}]\\n')\n        result = engine.play(board, chess.engine.Limit(time=0.1))\n        move = result.move\n        movehistory.append(move)\n        board.push(move)\n        print(board)\n    else:\n        move_input = input(\"Enter your move (in algebraic notation), or 'resign' to resign: \")\n        if move_input.lower() == resign_keyword:\n            print(\"You resigned. Game over.\")\n            break\n        move = chess.Move.from_uci(move_input)\n        if move in board.legal_moves:\n            movehistory.append(move)\n            board.push(move)\n        else:\n            print(\"Invalid move. Try again.\")\n        print(board)\n\ngame.add_line(movehistory)\ngame.headers[\"Event\"] = \"AI vs. Human Chess Game\"\ngame.headers[\"Site\"] = \"Pune\"\ngame.headers[\"Date\"] = str(datetime.datetime.now().date())\ngame.headers[\"Round\"] = 1\ngame.headers[\"White\"] = \"AI\"\ngame.headers[\"Black\"] = \"Human\"\ngame.headers[\"Result\"] = str(board.result(claim_draw=True))\n\nprint(game)\nSVG(chess.svg.board(board=board, size=400))\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install Flask","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install --upgrade chess","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import time\nimport traceback\nimport random\nimport chess\nimport chess.svg\nfrom flask import Flask, Response, request\nimport chess.engine\n\n# Initialize chess board\nboard = chess.Board()\n\n# Initialize Flask application\napp = Flask(__name__)\n\n# Searching Ai's Move\ndef aimove():\n    move = random.choice(list(board.legal_moves))\n    board.push(move)\n\n# Searching Stockfish's Move\ndef stockfish():\n    try:\n        engine = chess.engine.SimpleEngine.popen_uci(\"/home/aryashrestha/Documents/ChessBot-AI-Project/stockfish-ubuntu-x86-64-avx2/stockfish/stockfish-ubuntu-x86-64-avx2\")\n        result = engine.play(board, chess.engine.Limit(time=0.1))\n        engine.quit()  # Remember to quit the engine after use\n        return result.move\n    except Exception as e:\n        print(\"Error occurred while running Stockfish:\", e)\n        return None\n\n# Front Page of the Flask Web Page\n@app.route(\"/\")\ndef main():\n    global board\n    ret = '<html><head>'\n    ret += '<style>input {font-size: 20px; } button { font-size: 20px; }</style>'\n    ret += '</head><body>'\n    ret += '<img width=510 height=510 src=\"/board.svg?%f\"></img></br></br>' % time.time()\n    ret += '<form action=\"/game/\" method=\"post\"><button name=\"New Game\" type=\"submit\">New Game</button></form>'\n    ret += '<form action=\"/undo/\" method=\"post\"><button name=\"Undo\" type=\"submit\">Undo Last Move</button></form>'\n    ret += '<form action=\"/move/\"><input type=\"submit\" value=\"Make Human Move:\"><input name=\"move\" type=\"text\"></input></form>'\n    ret += '<form action=\"/dev/\" method=\"post\"><button name=\"Comp Move\" type=\"submit\">Make Ai Move</button></form>'\n    ret += '<form action=\"/engine/\" method=\"post\"><button name=\"Stockfish Move\" type=\"submit\">Make Stockfish Move</button></form>'\n    ret += '</body></html>'\n    return ret\n\n# Display Board\n@app.route(\"/board.svg/\")\ndef show_board():\n    return Response(chess.svg.board(board=board, size=700), mimetype='image/svg+xml')\n\n# Human Move\n@app.route(\"/move/\")\ndef move():\n    try:\n        move = request.args.get('move', default=\"\")\n        board.push_san(move)\n    except Exception:\n        traceback.print_exc()\n    return main()\n\n# Make Ai’s Move\n@app.route(\"/dev/\", methods=['POST'])\ndef dev():\n    try:\n        aimove()\n    except Exception:\n        traceback.print_exc()\n    return main()\n\n# Make UCI Compatible engine's move\n@app.route(\"/engine/\", methods=['POST'])\ndef engine():\n    try:\n        move = stockfish()\n        if move:\n            board.push(move)\n    except Exception:\n        traceback.print_exc()\n    return main()\n\n# New Game\n@app.route(\"/game/\", methods=['POST'])\ndef game():\n    board.reset()\n    return main()\n\n# Undo\n@app.route(\"/undo/\", methods=['POST'])\ndef undo():\n    try:\n        board.pop()\n    except Exception:\n        traceback.print_exc()\n    return main()\n\n# Run the Flask application\nif __name__ == '__main__':\n    app.run(port=5001)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}